# QUERIES:

These are some Realistic Queries for the System with their following SQL commands and relational algebra.
## Query 1: List all the cities which have more than 3 historical places to visit.

### Relational Algebra:

  a ← Locality ⨝<locality_id=PlacesToVisit.locality_id> PlacesToVisit
  
  b ← 𝞂<type = ‘Historical’>(a)
  
  c ← city_nameG count(city_name) (b) HAVING<ਹ<count> >=3>
 
  d ← 𝛑<city_name>(c)
 
MySQL Command:
 
 ![image](https://user-images.githubusercontent.com/91787844/236275991-286d9c4e-526a-446a-9e6e-b3c30cf9e4b5.png)
 
OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236276040-24bca0a7-56ae-485f-a4d8-36b15f43dd15.png)
 
## QUERY 2:  NON-AC buses between Delhi and Mumbai on date 16th April, 2021. 
 
### Relational Algebra
 
 a ← Bus ⨝<Bus.bus_id=BusReservation.bus_id> BusReservation
 
 b ← 𝞂<source = ‘Delhi and destination = ‘Mumbai’ and is_ac = false and date =’2021-4-16’>(a)
 
 c ← 𝛑<bus_id, bus_service_provider>(c)
 
MySQL Command
 
 ![image](https://user-images.githubusercontent.com/91787844/236276414-3ec12e87-9f4e-4cf6-92dc-21a742768c52.png)
 
OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236276491-9bb6f04a-d751-4b2d-834b-1ff16d0014f3.png)
 
## QUERY 3: Restaurants near the cheapest hotel in Delhi.
 
### Relational Algebra
 
 a ← hotels ⨝<hotel.locality_id=locality.locality_id> locality
 
 b ← 𝞂<city_name = “Delhi”>(a)
 
 c ← 𝛑<min(cost)>(b)
 
 d ← 𝞂<cost in c and city_name = “Delhi”>(b)
 
 e ← d ⨝<d.locality_id=Restaurants.locality_id>Restaurants
 
 f ← 𝛑<city_name>(e)
 

MySQL Command 
 
 ![image](https://user-images.githubusercontent.com/91787844/236276713-ff3af607-d54f-40dc-ac0f-bacf40c8419e.png)
 
 OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236276783-1f65575b-d212-4826-accb-3f44ea3c90a6.png)
 
## QUERY 4: Find restaurants which are nearby to the highest rated place to visit in Delhi.
 
### Relational Algebra
 
 a ← PlacesToVisit ⨝<PlacesToVisit.locality_id=Locality.locality_id>Locality
 
 b ← 𝞂<city_name = “Delhi”>(a)
 
 c ← 𝛑<max(rating)>(b)
 
 d ← 𝞂<cost in c and city_name = “Delhi”>(b)
 
 e ← d ⨝<d.locality_id=Restaurants.locality_id> Restaurants
 
 MySQL Command
 
 ![image](https://user-images.githubusercontent.com/91787844/236277045-4f037805-a7e7-4da6-ab7e-73cb06ba87a0.png)
 
 OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236277137-6c3cea75-77e3-42f2-9fd6-e270fac7ffc5.png)
 
## QUERY 5: Find those hotels in Delhi, which have those rooms available that can accommodate more than 1 person.
 
### Relational algebra
 
 a ← HotelReservation ⨝<HotelReservation.room_type = TypeOfRoom.room_type>TypeOfRoom
 
 b ← a ⨝<a.locality_id = Locality.locality_id> Locality
 
 c ← 𝞂<city_name = “Delhi” and max_accomodation > 1 and total_available_rooms > 1>(b)
 
 d ← 𝛑<distinct hote_name, room_type>(c)
 
MySQL Command 
 
 ![image](https://user-images.githubusercontent.com/91787844/236277448-9be6c780-b6a6-4243-bd21-489c67466221.png)

 OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236277500-8a60eee6-b2e1-4df7-a4db-c83995b16fc2.png)
 
## QUERY 6: All those cab service providers who can provide a ‘SUV’ cab in Vadodara.
 
### Relational algebra
 
 a ← Cabs ⨝<Cabs.cab_service_id=CabService.cab_service_id> CabService
 
 b ← 𝞂<cab_type = “SUV” and city_name = “Vadodara”>(a)
 
 c ← 𝛑<cab_service_id, provider_name>(b)

MySQL Command
 
 ![image](https://user-images.githubusercontent.com/91787844/236277679-9878d9d5-8c87-4f7a-bced-b2a44ebf4ced.png)
 
 OUTPUT
 
 ![image](https://user-images.githubusercontent.com/91787844/236277751-28500246-688f-4348-abe6-dac43b6a82c5.png)
